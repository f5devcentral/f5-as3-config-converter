/**
 * Copyright 2022 F5 Networks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

const assert = require('assert');

const removeDefaultValuesAS3 = require('../../src/postConverter/removeDefaultValuesAS3');

describe('Extended objects (removeDefaultValuesAS3.js)', () => {
    it('should remove default values from AS3 objects', () => {
        const extended = {
            class: 'ADC',
            schemaVersion: '3.26.0',
            AS3_Tenant: {
                class: 'Tenant',
                AS3_Application: {
                    class: 'Application',
                    template: 'generic',
                    httpProf: {
                        trustXFF: false,
                        knownMethods: [
                            'CONNECT', 'DELETE', 'GET', 'HEAD',
                            'LOCK', 'OPTIONS', 'POST', 'PROPFIND',
                            'PUT', 'TRACE', 'UNLOCK'
                        ],
                        maxRequests: 0,
                        pipelineAction: 'allow',
                        unknownMethodAction: 'allow',
                        hstsIncludeSubdomains: true,
                        hstsPeriod: 7862400,
                        hstsInsert: false,
                        hstsPreload: false,
                        xForwardedFor: true,
                        multiplexTransformations: true,
                        proxyType: 'reverse',
                        rewriteRedirects: 'none',
                        serverHeaderValue: 'BigIP',
                        viaRequest: 'remove',
                        viaResponse: 'remove',
                        class: 'HTTP_Profile'
                    }
                }
            }
        };
        const output = removeDefaultValuesAS3(extended);
        const expected = {
            class: 'ADC',
            schemaVersion: '3.26.0',
            AS3_Tenant: {
                class: 'Tenant',
                AS3_Application: {
                    class: 'Application',
                    template: 'generic',
                    httpProf: {
                        class: 'HTTP_Profile'
                    }
                }
            }
        };

        assert.deepStrictEqual(expected, output);
    });

    it('should not fail if inspected object has ref in else block of AS3 schema', () => {
        const extended = {
            class: 'ADC',
            schemaVersion: '3.26.0',
            id: 'urn:uuid:a35f7126-83ca-4100-9772-a7bc4c532da0',
            label: 'Converted Declaration',
            remark: 'Generated by Automation Config Converter',
            AS3_Tenant: {
                class: 'Tenant',
                AS3_Application: {
                    class: 'Application',

                    template: 'generic',
                    vs1: {
                        translateServerAddress: false,
                        translateServerPort: false,
                        class: 'Service_Forwarding',
                        profileL4: {
                            bigip: '/Common/apm-forwarding-fastL4'
                        },
                        forwardingType: 'ip',
                        virtualAddresses: [
                            [
                                '0.0.0.0/0',
                                '10.10.192.0/24'
                            ]
                        ],
                        virtualPort: 0,
                        persistenceMethods: [],
                        layer4: 'any',
                        snat: 'none'
                    }
                }
            }
        };
        const output = removeDefaultValuesAS3(extended);
        const expected = {
            class: 'ADC',
            schemaVersion: '3.26.0',
            id: 'urn:uuid:a35f7126-83ca-4100-9772-a7bc4c532da0',
            label: 'Converted Declaration',
            remark: 'Generated by Automation Config Converter',
            AS3_Tenant: {
                class: 'Tenant',
                AS3_Application: {
                    class: 'Application',
                    template: 'generic',
                    vs1: {
                        translateServerAddress: false,
                        translateServerPort: false,
                        class: 'Service_Forwarding',
                        profileL4: {
                            bigip: '/Common/apm-forwarding-fastL4'
                        },
                        forwardingType: 'ip',
                        virtualAddresses: [
                            [
                                '0.0.0.0/0',
                                '10.10.192.0/24'
                            ]
                        ],
                        virtualPort: 0,
                        persistenceMethods: [],
                        snat: 'none'
                    }
                }
            }
        };
        assert.deepStrictEqual(expected, output);
    });

    it('should not fail on UNCERTAIN_CERT', () => {
        const extended = {
            class: 'ADC',
            schemaVersion: '3.26.0',
            id: 'urn:uuid:a35f7126-83ca-4100-9772-a7bc4c532da0',
            label: 'Converted Declaration',
            remark: 'Generated by Automation Config Converter',
            AS3_Tenant: {
                class: 'Tenant',
                AS3_Application: {
                    class: 'Application',
                    edge_case: {
                        certificates: [
                            {
                                certificate: '/Common/Shared/default_certificate'
                            }
                        ],
                        class: 'UNCERTAIN_CERT',
                        tls1_0Enabled: false,
                        tls1_1Enabled: false,
                        tls1_2Enabled: true,
                        tls1_3Enabled: true,
                        singleUseDhEnabled: false,
                        insertEmptyFragmentsEnabled: false
                    }
                }
            }
        };

        const output = removeDefaultValuesAS3(extended);
        const expected = {
            class: 'ADC',
            schemaVersion: '3.26.0',
            id: 'urn:uuid:a35f7126-83ca-4100-9772-a7bc4c532da0',
            label: 'Converted Declaration',
            remark: 'Generated by Automation Config Converter',
            AS3_Tenant: {
                class: 'Tenant',
                AS3_Application: {
                    class: 'Application',
                    edge_case: {
                        certificates: [
                            {
                                certificate: '/Common/Shared/default_certificate'
                            }
                        ],
                        class: 'UNCERTAIN_CERT',
                        tls1_0Enabled: false,
                        tls1_1Enabled: false,
                        tls1_2Enabled: true,
                        tls1_3Enabled: true,
                        singleUseDhEnabled: false,
                        insertEmptyFragmentsEnabled: false
                    }
                }
            }
        };
        assert.deepStrictEqual(expected, output);
    });
});

describe('Test removeDefaultProfiles from removeDefaultValuesAS3.js', () => {
    it('delete one default profile of a service', () => {
        const input = {
            class: 'ADC',
            schemaVersion: '3.39.0',
            id: 'urn:uuid:1858afbd-bb2e-4984-89e3-18f3aacfe498',
            label: 'Converted Declaration',
            remark: 'Generated by Automation Config Converter',
            Common: {
                class: 'Tenant',
                Shared: {
                    class: 'Application',
                    template: 'shared',
                    an_app: {
                        remark: 'Shared',
                        layer4: 'udp',
                        translateServerAddress: false,
                        translateServerPort: false,
                        class: 'Service_UDP',
                        profileUDP: {
                            bigip: '/Common/udp'
                        },
                        virtualAddresses: [
                            '10.1.1.7'
                        ],
                        virtualPort: 1234,
                        snat: 'auto'
                    }
                }
            }
        };

        const expected = JSON.parse(JSON.stringify(input));
        // delete the profile
        delete expected.Common.Shared.an_app.profileUDP;
        const output = removeDefaultValuesAS3(input);
        assert.deepStrictEqual(expected, output);
    });

    it('delete two default profiles of a service', () => {
        const input = {
            class: 'ADC',
            schemaVersion: '3.39.0',
            id: 'urn:uuid:1858afbd-bb2e-4984-89e3-18f3aacfe498',
            label: 'Converted Declaration',
            remark: 'Generated by Automation Config Converter',
            Common: {
                class: 'Tenant',
                Shared: {
                    class: 'Application',
                    template: 'shared',
                    an_app: {
                        remark: 'Shared',
                        layer4: 'tcp',
                        translateServerAddress: false,
                        translateServerPort: false,
                        class: 'Service_HTTP',
                        profileTCP: {
                            bigip: '/Common/f5-tcp-progressive'
                        },
                        profileHTTP: {
                            bigip: '/Common/http'
                        },
                        virtualAddresses: [
                            '10.1.1.7'
                        ],
                        virtualPort: 1234,
                        snat: 'auto'
                    }
                }
            }
        };

        const expected = JSON.parse(JSON.stringify(input));
        // delete the profiles
        delete expected.Common.Shared.an_app.profileTCP;
        delete expected.Common.Shared.an_app.profileHTTP;
        const output = removeDefaultValuesAS3(input);
        assert.deepStrictEqual(expected, output);
    });

    it('keep a non default profile of a service', () => {
        const input = {
            class: 'ADC',
            schemaVersion: '3.39.0',
            id: 'urn:uuid:1858afbd-bb2e-4984-89e3-18f3aacfe498',
            label: 'Converted Declaration',
            remark: 'Generated by Automation Config Converter',
            Common: {
                class: 'Tenant',
                Shared: {
                    class: 'Application',
                    template: 'shared',
                    an_app: {
                        remark: 'Shared',
                        translateServerAddress: false,
                        translateServerPort: false,
                        class: 'Service_Forwarding',
                        profileL4: {
                            bigip: '/Common/nonDefaultProfile'
                        },
                        forwardingType: 'ip',
                        virtualAddresses: [
                            '10.1.1.7'
                        ],
                        virtualPort: 1234,
                        snat: 'auto'
                    }
                }
            }
        };

        // nothing should change in the case of a non-default profile
        const output = removeDefaultValuesAS3(input);
        assert.deepStrictEqual(input, output);
    });

    it('delete default profiles for two services', () => {
        const input = {
            class: 'ADC',
            schemaVersion: '3.39.0',
            id: 'urn:uuid:1858afbd-bb2e-4984-89e3-18f3aacfe498',
            label: 'Converted Declaration',
            remark: 'Generated by Automation Config Converter',
            Common: {
                class: 'Tenant',
                Shared: {
                    class: 'Application',
                    template: 'shared',
                    an_app: {
                        remark: 'Shared',
                        layer4: 'tcp',
                        translateServerAddress: false,
                        translateServerPort: false,
                        class: 'Service_L4',
                        profileL4: {
                            bigip: '/Common/fastL4'
                        },
                        virtualAddresses: [
                            '10.1.1.7'
                        ],
                        virtualPort: 1234,
                        snat: 'auto'
                    },
                    another_app: {
                        remark: 'Shared',
                        layer4: 'tcp',
                        translateServerAddress: false,
                        translateServerPort: false,
                        class: 'Service_TCP',
                        profileTCP: {
                            bigip: '/Common/f5-tcp-progressive'
                        },
                        virtualAddresses: [
                            '10.1.1.7'
                        ],
                        virtualPort: 1234,
                        snat: 'auto'
                    }
                }
            }
        };

        const expected = JSON.parse(JSON.stringify(input));
        // delete the profiles
        delete expected.Common.Shared.an_app.profileL4;
        delete expected.Common.Shared.another_app.profileTCP;
        const output = removeDefaultValuesAS3(input);
        assert.deepStrictEqual(expected, output);
    });
});
