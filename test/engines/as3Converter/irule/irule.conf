#TMSH-VERSION: 15.0.1

ltm rule /AS3_Tenant/AS3_Application/hashRuleCommonShared {
when HTTP_REQUEST {
persist hash [HTTP::header myheader]
}
}
ltm rule /AS3_Tenant/AS3_Application/testItem {
when HTTP_REQUEST {
    #Set the SNI value (e.g. HTTP::host)
    set sni_value [getfield [HTTP::host] ":" 1]
}
when SERVERSSL_CLIENTHELLO_SEND {
    # SNI extension record as defined in RFC 3546/3.1
    #
    # - TLS Extension Type                =  int16( 0 = SNI )
    # - TLS Extension Length              =  int16( $sni_length + 5 byte )
    #    - SNI Record Length              =  int16( $sni_length + 3 byte)
    #       - SNI Record Type             =   int8( 0 = HOST )
    #          - SNI Record Value Length  =  int16( $sni_length )
    #          - SNI Record Value         =    str( $sni_value )
    #
    # Calculate the length of the SNI value, Compute the SNI Record / TLS extension fields and add the result to the SERVERSSL_CLIENTHELLO
    SSL::extensions insert [binary format SSScSa* 0 [expr { [set sni_length [string length $sni_value]] + 5 }] [expr { $sni_length + 3 }] 0 $sni_length $sni_value]
}
}
ltm rule /AS3_Tenant/AS3_Application/theRule1 {
when CLIENT_ACCEPTED { }
}
ltm rule /AS3_Tenant/AS3_Application/theRule2 {
when CLIENT_ACCEPTED { }
}
ltm rule /AS3_Tenant/AS3_Application/universalRuleCommonShared {
when HTTP_RESPONSE {
if { [HTTP::cookie exists "JSESSIONID"] } {
persist add uie [HTTP::cookie "JSESSIONID"]
}
}
 when HTTP_REQUEST {
if { [HTTP::cookie exists "JSESSIONID"] } {
persist uie [HTTP::cookie "JSESSIONID"]
}
}
}
ltm rule /AS3_Tenant/AS3_Application/member_reselection {
timing on
          when CLIENT_ACCEPTED {
          set static::retries 0
          }
          when LB_FAILED {
          log local0. "Requesting client:[IP::remote_addr] Retries: $static::retries Pool:[LB::server]"
          if { $static::retries < [active_members [LB::server pool]] } {
          LB::mode rr
          LB::reselect
          incr static::retries
          }
          }
}
